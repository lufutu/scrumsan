'use client';

import { useState, useEffect } from 'react';
import { 
  X, 
  Edit2, 
  Save, 
  Plus, 
  Trash2, 
  Check, 
  MessageCircle, 
  Paperclip, 
  Clock, 
  Users, 
  Calendar,
  Activity,
  Link,
  Share,
  MoreHorizontal,
  Star,
  ExternalLink
} from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, VisuallyHidden } from '@/components/ui/dialog';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import LabelSelector from './LabelSelector';
import PerformersSelector from './PerformersSelector';
import EstimationSelector from './EstimationSelector';
import ItemTypeSelector from './ItemTypeSelector';
import CustomFieldsEditor, { CustomField, CustomFieldValue } from './CustomFieldsEditor';
import { SubitemsManager } from './SubitemsManager';
import { BlockingItemsManager } from './BlockingItemsManager';
import { ParentItemManager } from './ParentItemManager';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

interface ItemModalProps {
  isOpen: boolean;
  onClose: () => void;
  boardId?: string;
  item: {
    id: string;
    itemCode?: string;
    title: string;
    description?: string;
    taskType: string;
    storyPoints?: number;
    effortUnits?: number;
    estimationType?: 'story_points' | 'effort_units';
    itemValue?: string;
    assignee?: { id: string; name: string; initials: string };
    reviewer?: { id: string; name: string; initials: string };
    assignees?: Array<{ id: string; fullName: string | null; avatarUrl: string | null; email: string }>;
    reviewers?: Array<{ id: string; fullName: string | null; avatarUrl: string | null; email: string }>;
    labels?: Array<{ id?: string; name: string; color: string }>;
    customFieldValues?: CustomFieldValue[];
    isPriority?: boolean;
    status?: string;
    sprint?: string;
    column?: string;
    dueDate?: string;
    parentId?: string;
    createdAt: string;
    updatedAt: string;
  };
  onUpdate?: (updates: any) => void;
  onDelete?: () => void;
  users?: Array<{ id: string; fullName: string; email: string }>;
  sprints?: Array<{ id: string; name: string; status: string }>;
  columns?: Array<{ id: string; name: string }>;
  customFields?: CustomField[];
  currentUserId?: string;
  boardConfig?: {
    effortUnitType: 'points' | 'hours' | 'custom';
    effortUnitName?: string;
    itemValueOptions: string[];
  };
  availableTasks?: Array<{
    id: string;
    title: string;
    taskType: string;
    status: string;
    itemCode?: string;
  }>;
}

interface ChecklistItem {
  id: string;
  content: string;
  completed: boolean;
  assignee?: { id: string; name: string };
}

interface Checklist {
  id: string;
  name: string;
  items: ChecklistItem[];
}

interface Comment {
  id: string;
  content: string;
  author: { name: string; initials: string };
  createdAt: string;
}

interface Attachment {
  id: string;
  name: string;
  url: string;
  size: number;
  type: string;
  uploadedBy: string;
  uploadedAt: string;
}

interface WorklogEntry {
  id: string;
  description: string;
  hoursLogged: number;
  dateLogged: string;
  startDate: string;
  user: { name: string; id: string };
}

interface SubItem {
  id: string;
  title: string;
  taskType: string;
  status: string;
  assignee?: { name: string; initials: string };
}

interface BlockingItem {
  id: string;
  title: string;
  taskType: string;
  status: string;
}

export function ItemModal({
  isOpen,
  onClose,
  boardId,
  item,
  onUpdate,
  onDelete,
  users = [],
  sprints = [],
  columns = [],
  customFields = [],
  currentUserId,
  boardConfig = {
    effortUnitType: 'points',
    itemValueOptions: ['XS', 'S', 'M', 'L', 'XL', 'XXL']
  },
  availableTasks = []
}: ItemModalProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [editedItem, setEditedItem] = useState(item);
  const [activeTab, setActiveTab] = useState('description');
  const [checklists, setChecklists] = useState<Checklist[]>([]);
  const [comments, setComments] = useState<Comment[]>([]);
  const [attachments, setAttachments] = useState<Attachment[]>([]);
  const [worklogEntries, setWorklogEntries] = useState<WorklogEntry[]>([]);
  const [newComment, setNewComment] = useState('');
  const [newChecklistName, setNewChecklistName] = useState('');
  const [subItems, setSubItems] = useState<SubItem[]>([]);
  const [blockingItems, setBlockingItems] = useState<BlockingItem[]>([]);
  const [newWorklogData, setNewWorklogData] = useState({
    description: '',
    hoursLogged: 0,
    startDate: new Date().toISOString().split('T')[0],
    assigneeId: ''
  });
  const [showWorklogForm, setShowWorklogForm] = useState(false);
  const [searchSubItem, setSearchSubItem] = useState('');
  const [searchBlockingItem, setSearchBlockingItem] = useState('');

  useEffect(() => {
    setEditedItem(item);
  }, [item]);

  const handleSave = () => {
    onUpdate?.(editedItem);
    setIsEditing(false);
  };

  const addChecklist = () => {
    if (!newChecklistName.trim()) return;
    
    const newChecklist: Checklist = {
      id: `checklist-${Date.now()}`,
      name: newChecklistName,
      items: []
    };
    
    setChecklists([...checklists, newChecklist]);
    setNewChecklistName('');
  };

  const addChecklistItem = (checklistId: string, content: string) => {
    const newItem: ChecklistItem = {
      id: `item-${Date.now()}`,
      content,
      completed: false
    };
    
    setChecklists(checklists.map(checklist => 
      checklist.id === checklistId 
        ? { ...checklist, items: [...checklist.items, newItem] }
        : checklist
    ));
  };

  const toggleChecklistItem = (checklistId: string, itemId: string) => {
    setChecklists(checklists.map(checklist => 
      checklist.id === checklistId 
        ? {
            ...checklist,
            items: checklist.items.map(item =>
              item.id === itemId ? { ...item, completed: !item.completed } : item
            )
          }
        : checklist
    ));
  };

  const addComment = () => {
    if (!newComment.trim()) return;
    
    const comment: Comment = {
      id: `comment-${Date.now()}`,
      content: newComment,
      author: { name: 'Current User', initials: 'CU' },
      createdAt: new Date().toISOString()
    };
    
    setComments([...comments, comment]);
    setNewComment('');
  };

  const getTaskTypeColor = () => {
    switch (item.taskType) {
      case 'story': return 'bg-emerald-500';
      case 'bug': return 'bg-red-500';
      case 'task': return 'bg-orange-500';
      case 'epic': return 'bg-purple-500';
      case 'improvement': return 'bg-blue-500';
      default: return 'bg-gray-500';
    }
  };

  const getTaskTypeIcon = () => {
    switch (item.taskType) {
      case 'story': return '‚óè';
      case 'bug': return 'üêõ';
      case 'task': return '‚óè';
      case 'epic': return '‚ö°';
      case 'improvement': return '‚¨ÜÔ∏è';
      default: return '‚óè';
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="w-[95vw] max-w-[1400px] max-h-[95vh] overflow-hidden flex flex-col p-0">
        <VisuallyHidden>
          <DialogTitle>
            Edit Task: {item.title || item.itemCode || item.id}
          </DialogTitle>
        </VisuallyHidden>
        {/* Header */}
        <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className={cn(
                "w-8 h-8 rounded-full flex items-center justify-center text-white font-medium",
                getTaskTypeColor()
              )}>
                {getTaskTypeIcon()}
              </div>
              <div>
                <div className="flex items-center gap-2">
                  <h2 className="text-lg font-semibold text-gray-900">{item.itemCode || `#${item.id.slice(0, 8)}`}</h2>
                  <span className="text-sm text-gray-500 uppercase">{item.taskType}</span>
                </div>
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" className="text-gray-600">
                <Share className="w-4 h-4" />
                <span className="ml-2">Share</span>
              </Button>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="sm" className="text-gray-600">
                    <MoreHorizontal className="w-4 h-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem>Open in new tab</DropdownMenuItem>
                  <DropdownMenuItem>Clone Item</DropdownMenuItem>
                  <DropdownMenuItem>Mirror to another Board</DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem>Move to Top</DropdownMenuItem>
                  <DropdownMenuItem>Add to predefined items</DropdownMenuItem>
                  <DropdownMenuItem>Move to another Board</DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={onDelete} className="text-red-600">
                    Delete
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
              <Button variant="ghost" size="icon" onClick={onClose} className="text-gray-400 hover:text-gray-600">
                <X className="w-5 h-5" />
              </Button>
            </div>
          </div>
        </div>

        <div className="flex-1 overflow-hidden flex">
          {/* Main Content */}
          <div className="flex-1 overflow-y-auto p-6">
            {/* Title */}
            <div className="mb-6">
              {isEditing ? (
                <div className="flex items-center gap-2">
                  <Input
                    value={editedItem.title}
                    onChange={(e) => setEditedItem({ ...editedItem, title: e.target.value })}
                    className="text-2xl font-semibold border-0 border-b-2 border-gray-300 focus:border-blue-500 rounded-none px-0"
                    placeholder="Task title"
                  />
                  <Button size="sm" onClick={handleSave} className="bg-green-500 hover:bg-green-600 text-white">
                    <Save className="w-4 h-4" />
                  </Button>
                  <Button size="sm" variant="ghost" onClick={() => setIsEditing(false)}>
                    <X className="w-4 h-4" />
                  </Button>
                </div>
              ) : (
                <div className="group flex items-center gap-2">
                  <h1 className="text-2xl font-semibold text-gray-900">{item.title}</h1>
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    onClick={() => setIsEditing(true)}
                    className="opacity-0 group-hover:opacity-100 transition-opacity"
                  >
                    <Edit2 className="w-4 h-4" />
                  </Button>
                </div>
              )}
            </div>

            {/* Tabs */}
            <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
              <TabsList className="grid w-full grid-cols-4 h-auto bg-transparent border-b rounded-none p-0">
                <TabsTrigger 
                  value="description" 
                  className="data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-blue-500 rounded-none pb-3"
                >
                  Description
                </TabsTrigger>
                <TabsTrigger 
                  value="checklists"
                  className="data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-blue-500 rounded-none pb-3"
                >
                  Checklists
                </TabsTrigger>
                <TabsTrigger 
                  value="files"
                  className="data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-blue-500 rounded-none pb-3"
                >
                  Files ({attachments.length})
                </TabsTrigger>
                <TabsTrigger 
                  value="comments"
                  className="data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-blue-500 rounded-none pb-3"
                >
                  Comments ({comments.length})
                </TabsTrigger>
              </TabsList>

                <TabsContent value="description" className="mt-6">
                  <div className="space-y-4">
                    <div>
                      <Label>Description</Label>
                      <Textarea
                        value={editedItem.description || ''}
                        onChange={(e) => setEditedItem({ ...editedItem, description: e.target.value })}
                        placeholder="Add a description..."
                        rows={8}
                        className="mt-2"
                      />
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="checklists" className="mt-6">
                  <div className="space-y-4">
                    {/* Add New Checklist */}
                    <div className="flex items-center space-x-2">
                      <Input
                        placeholder="Checklist name..."
                        value={newChecklistName}
                        onChange={(e) => setNewChecklistName(e.target.value)}
                      />
                      <Button onClick={addChecklist}>
                        <Plus className="w-4 h-4 mr-2" />
                        Add Checklist
                      </Button>
                    </div>

                    {/* Checklists */}
                    {checklists.map((checklist) => (
                      <Card key={checklist.id}>
                        <CardHeader>
                          <div className="flex items-center justify-between">
                            <CardTitle className="text-lg">{checklist.name}</CardTitle>
                            <Button variant="ghost" size="sm">
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          </div>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-2">
                            {checklist.items.map((item) => (
                              <div key={item.id} className="flex items-center space-x-2">
                                <Checkbox
                                  checked={item.completed}
                                  onCheckedChange={() => toggleChecklistItem(checklist.id, item.id)}
                                />
                                <span className={item.completed ? 'line-through text-gray-500' : ''}>
                                  {item.content}
                                </span>
                              </div>
                            ))}
                            <Input
                              placeholder="Add checklist item..."
                              onKeyDown={(e) => {
                                if (e.key === 'Enter') {
                                  addChecklistItem(checklist.id, e.currentTarget.value);
                                  e.currentTarget.value = '';
                                }
                              }}
                            />
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </TabsContent>

                <TabsContent value="files" className="mt-6">
                  <div className="space-y-4">
                    <Button>
                      <Paperclip className="w-4 h-4 mr-2" />
                      Attach Files
                    </Button>
                    <div className="grid grid-cols-2 gap-4">
                      {attachments.map((file) => (
                        <Card key={file.id}>
                          <CardContent className="p-4">
                            <div className="flex items-center space-x-2">
                              <Paperclip className="w-4 h-4" />
                              <span className="text-sm font-medium">{file.name}</span>
                            </div>
                            <p className="text-xs text-gray-500 mt-1">
                              {file.size} bytes ‚Ä¢ {file.uploadedBy}
                            </p>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="comments" className="mt-6">
                  <div className="space-y-4">
                    {/* Add Comment */}
                    <div className="space-y-2">
                      <Textarea
                        placeholder="Write a comment..."
                        value={newComment}
                        onChange={(e) => setNewComment(e.target.value)}
                        rows={3}
                      />
                      <Button onClick={addComment}>
                        <MessageCircle className="w-4 h-4 mr-2" />
                        Add Comment
                      </Button>
                    </div>

                    {/* Comments List */}
                    <div className="space-y-4">
                      {comments.map((comment) => (
                        <Card key={comment.id}>
                          <CardContent className="p-4">
                            <div className="flex items-start space-x-3">
                              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-xs font-medium text-white">
                                {comment.author.initials}
                              </div>
                              <div className="flex-1">
                                <div className="flex items-center space-x-2 mb-1">
                                  <span className="font-medium">{comment.author.name}</span>
                                  <span className="text-xs text-gray-500">
                                    {new Date(comment.createdAt).toLocaleDateString()}
                                  </span>
                                </div>
                                <p className="text-sm">{comment.content}</p>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                </TabsContent>
              </Tabs>
            </div>

          {/* Sidebar */}
          <div className="w-80 border-l border-gray-200 bg-gray-50 p-6 space-y-6">
              {/* Location */}
              <div>
                <Label className="text-sm font-medium">Location</Label>
                <div className="mt-2 space-y-2">
                  <Select 
                    value={editedItem.sprint || 'none'}
                    onValueChange={(value) => setEditedItem({ ...editedItem, sprint: value === 'none' ? undefined : value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select Sprint" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="none">No Sprint</SelectItem>
                      {sprints.map((sprint) => (
                        <SelectItem key={sprint.id} value={sprint.id}>
                          {sprint.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <Select 
                    value={editedItem.column || 'backlog'}
                    onValueChange={(value) => setEditedItem({ ...editedItem, column: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select Column" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="backlog">Backlog</SelectItem>
                      <SelectItem value="sprint">Sprint</SelectItem>
                      <SelectItem value="followup">Follow up</SelectItem>
                      {columns.map((column) => (
                        <SelectItem key={column.id} value={column.id}>
                          {column.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Details Tab */}
              <Tabs defaultValue="details" className="w-full">
                <TabsList className="grid w-full grid-cols-4">
                  <TabsTrigger value="details">Details</TabsTrigger>
                  <TabsTrigger value="worklog">Worklog</TabsTrigger>
                  <TabsTrigger value="relations">Relations</TabsTrigger>
                  <TabsTrigger value="events">Events</TabsTrigger>
                </TabsList>

                <TabsContent value="details" className="space-y-6">
                  {/* Item Type */}
                  <ItemTypeSelector
                    selectedType={editedItem.taskType}
                    onTypeChange={(type) => {
                      setEditedItem({ ...editedItem, taskType: type })
                      onUpdate?.({ taskType: type })
                    }}
                  />

                  {/* Performers (Assignees & Reviewers) */}
                  <PerformersSelector
                    boardId={boardId}
                    currentUserId={currentUserId}
                    selectedAssignees={editedItem.assignees || []}
                    selectedReviewers={editedItem.reviewers || []}
                    users={users as any}
                    onAssigneesChange={(assignees) => {
                      setEditedItem({ ...editedItem, assignees })
                      onUpdate?.({ assignees })
                    }}
                    onReviewersChange={(reviewers) => {
                      setEditedItem({ ...editedItem, reviewers })
                      onUpdate?.({ reviewers })
                    }}
                  />

                  {/* Estimation with Item Value and ROI */}
                  <EstimationSelector
                    storyPoints={editedItem.storyPoints}
                    effortUnits={editedItem.effortUnits}
                    estimationType={editedItem.estimationType}
                    itemValue={editedItem.itemValue}
                    effortUnitType={boardConfig.effortUnitType}
                    effortUnitName={boardConfig.effortUnitName}
                    itemValueOptions={boardConfig.itemValueOptions}
                    onStoryPointsChange={(points) => {
                      setEditedItem({ ...editedItem, storyPoints: points })
                      onUpdate?.({ storyPoints: points })
                    }}
                    onEffortUnitsChange={(units) => {
                      setEditedItem({ ...editedItem, effortUnits: units })
                      onUpdate?.({ effortUnits: units })
                    }}
                    onEstimationTypeChange={(type) => {
                      setEditedItem({ ...editedItem, estimationType: type })
                      onUpdate?.({ estimationType: type })
                    }}
                    onItemValueChange={(value) => {
                      setEditedItem({ ...editedItem, itemValue: value })
                      onUpdate?.({ itemValue: value })
                    }}
                  />

                  {/* Labels */}
                  <div>
                    <Label className="text-sm font-medium">Labels</Label>
                    <div className="mt-2">
                      {boardId ? (
                        <LabelSelector
                          boardId={boardId}
                          selectedLabels={editedItem.labels?.map(l => ({
                            id: l.id || '',
                            name: l.name,
                            color: l.color
                          })) || []}
                          onLabelsChange={(labels) => {
                            setEditedItem({ 
                              ...editedItem, 
                              labels: labels.map(l => ({ 
                                id: l.id, 
                                name: l.name, 
                                color: l.color 
                              }))
                            })
                            onUpdate?.({ labels })
                          }}
                        />
                      ) : (
                        <div className="flex flex-wrap gap-1">
                          {editedItem.labels?.map((label, index) => (
                            <Badge key={index} variant="outline" style={{ borderColor: label.color }}>
                              {label.name}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Custom Fields */}
                  <CustomFieldsEditor
                    customFields={customFields}
                    customFieldValues={editedItem.customFieldValues}
                    onFieldValueChange={(fieldId, value) => {
                      const currentValues = editedItem.customFieldValues || []
                      const existingIndex = currentValues.findIndex(v => v.customFieldId === fieldId)
                      
                      let newValues
                      if (existingIndex >= 0) {
                        newValues = [...currentValues]
                        newValues[existingIndex] = { ...newValues[existingIndex], value }
                      } else {
                        newValues = [...currentValues, {
                          id: '', // Will be set by backend
                          customFieldId: fieldId,
                          value
                        }]
                      }
                      
                      setEditedItem({ ...editedItem, customFieldValues: newValues })
                      onUpdate?.({ customFieldValues: newValues })
                    }}
                  />
                </TabsContent>

                <TabsContent value="worklog" className="space-y-4">
                  <Button>
                    <Clock className="w-4 h-4 mr-2" />
                    Log Work
                  </Button>
                  <div className="space-y-2">
                    {worklogEntries.map((entry) => (
                      <Card key={entry.id}>
                        <CardContent className="p-3">
                          <div className="flex justify-between items-start">
                            <div>
                              <p className="text-sm font-medium">{entry.description}</p>
                              <p className="text-xs text-gray-500">{entry.user.name}</p>
                            </div>
                            <Badge variant="outline">{entry.hoursLogged}h</Badge>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </TabsContent>

                <TabsContent value="relations" className="space-y-6">
                  {/* Parent Item Management */}
                  <ParentItemManager
                    taskId={item.id}
                    boardId={boardId}
                    availableTasks={availableTasks}
                    onParentChanged={() => onUpdate?.({})}
                  />

                  {/* Subitems Management */}
                  <SubitemsManager
                    taskId={item.id}
                    boardId={boardId}
                    availableTasks={availableTasks}
                    users={users}
                    onSubitemAdded={() => onUpdate?.({})}
                    onSubitemRemoved={() => onUpdate?.({})}
                  />

                  {/* Blocking Items Management */}
                  <BlockingItemsManager
                    taskId={item.id}
                    boardId={boardId}
                    availableTasks={availableTasks}
                    onBlockingRelationAdded={() => onUpdate?.({})}
                    onBlockingRelationRemoved={() => onUpdate?.({})}
                  />
                </TabsContent>

                <TabsContent value="events" className="space-y-4">
                  <div>
                    <Label>Due Date</Label>
                    <Input 
                      type="date" 
                      className="mt-1"
                      value={editedItem.dueDate || ''}
                      onChange={(e) => setEditedItem({ ...editedItem, dueDate: e.target.value })}
                    />
                  </div>
                  <Button variant="outline">
                    <Calendar className="w-4 h-4 mr-2" />
                    Add Event
                  </Button>
                </TabsContent>
              </Tabs>

              {/* Followers */}
              <div>
                <Label className="text-sm font-medium">Followers</Label>
                <div className="mt-2 flex items-center space-x-2">
                  <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-xs font-medium text-white">
                    {item.assignee?.initials || 'U'}
                  </div>
                  <Button variant="outline" size="sm">
                    <Plus className="w-3 h-3" />
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

export { ItemModal };