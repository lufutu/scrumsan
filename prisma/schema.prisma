generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @db.Uuid
  email                   String?              @unique
  fullName                String?              @map("full_name")
  avatarUrl               String?              @map("avatar_url")
  phone                   String?
  emailConfirmed          Boolean              @default(false) @map("email_confirmed")
  lastSignIn              DateTime?            @map("last_sign_in") @db.Timestamptz(6)
  createdAt               DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  authSyncedAt            DateTime?            @map("auth_synced_at") @db.Timestamptz(6)
  attachments             Attachment[]
  auditLogs               AuditLog[]
  boardMemberships        BoardMember[]        @relation("UserBoardMemberships")
  createdBoards           Board[]              @relation("BoardCreator")
  comments                Comment[]
  triggeredNotifications  Notification[]       @relation("NotificationTriggeredBy")
  notifications           Notification[]       @relation("UserNotifications")
  organizationMembers     OrganizationMember[]
  projectMembers          ProjectMember[]
  createdProjects         Project[]            @relation("ProjectCreator")
  taskActivities          TaskActivity[]       @relation("UserTaskActivities")
  taskAssignments         TaskAssignee[]
  completedChecklistItems TaskChecklistItem[]  @relation("ChecklistItemCompletedBy")
  createdChecklistItems   TaskChecklistItem[]
  createdChecklists       TaskChecklist[]
  taskFollows             TaskFollower[]       @relation("UserTaskFollows")
  createdTaskRelations    TaskRelation[]       @relation("TaskRelationCreator")
  taskReviews             TaskReviewer[]
  worklogEntries          TaskWorklog[]
  createdTasks            Task[]               @relation("TaskCreator")
  acceptedInvitations     TeamInvitation[]     @relation("InvitationAccepter")
  sentInvitations         TeamInvitation[]     @relation("InvitationInviter")
  approvedTimeOff         TimeOffEntry[]       @relation("TimeOffApprover")
  createdTimelineEvents   TimelineEvent[]      @relation("TimelineEventCreator")

  @@map("users")
}

model Organization {
  id             String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  slug           String?              @unique
  description    String?
  ownerId        String?              @map("owner_id") @db.Uuid
  settings       Json?                @default("{}")
  billingEmail   String?              @map("billing_email")
  plan           String?              @default("free")
  logo           String?
  createdAt      DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  auditLogs      AuditLog[]
  boards         Board[]
  customRoles    CustomRole[]
  notifications  Notification[]
  members        OrganizationMember[]
  permissionSets PermissionSet[]
  projects       Project[]
  invitations    TeamInvitation[]

  @@index([slug])
  @@map("organizations")
}

model OrganizationMember {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId      String              @map("organization_id") @db.Uuid
  userId              String              @map("user_id") @db.Uuid
  role                String
  permissionSetId     String?             @map("permission_set_id") @db.Uuid
  jobTitle            String?             @map("job_title")
  workingHoursPerWeek Int?                @default(40) @map("working_hours_per_week")
  joinDate            DateTime?           @map("join_date") @db.Date
  createdAt           DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  profileData         MemberProfile?
  organization        Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  permissionSet       PermissionSet?      @relation(fields: [permissionSetId], references: [id])
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  engagements         ProjectEngagement[]
  timeOffEntries      TimeOffEntry[]
  timelineEvents      TimelineEvent[]

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@index([permissionSetId])
  @@index([userId, organizationId]) // Composite index for user's organizations query
  @@map("organization_members")
}

model TeamInvitation {
  id                  String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId      String         @map("organization_id") @db.Uuid
  email               String
  role                String
  permissionSetId     String?        @map("permission_set_id") @db.Uuid
  jobTitle            String?        @map("job_title")
  workingHoursPerWeek Int?           @default(40) @map("working_hours_per_week")
  invitedBy           String         @map("invited_by") @db.Uuid
  token               String         @unique
  expiresAt           DateTime       @map("expires_at") @db.Timestamptz(6)
  acceptedAt          DateTime?      @map("accepted_at") @db.Timestamptz(6)
  acceptedBy          String?        @map("accepted_by") @db.Uuid
  createdAt           DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  accepter            User?          @relation("InvitationAccepter", fields: [acceptedBy], references: [id])
  inviter             User           @relation("InvitationInviter", fields: [invitedBy], references: [id])
  organization        Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  permissionSet       PermissionSet? @relation(fields: [permissionSetId], references: [id])

  @@unique([organizationId, email], name: "organizationId_email")
  @@index([organizationId])
  @@index([invitedBy])
  @@index([acceptedBy])
  @@index([permissionSetId])
  @@map("team_invitations")
}

model Project {
  id             String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String              @map("organization_id") @db.Uuid
  name           String
  slug           String?
  description    String?
  logo           String?
  startDate      DateTime?           @map("start_date") @db.Date
  endDate        DateTime?           @map("end_date") @db.Date
  status         String?             @default("active")
  settings       Json?               @default("{}")
  clientName     String?             @map("client_name")
  clientEmail    String?             @map("client_email")
  createdBy      String?             @map("created_by") @db.Uuid
  createdAt      DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  boardLinks     ProjectBoard[]
  engagements    ProjectEngagement[]
  members        ProjectMember[]
  creator        User?               @relation("ProjectCreator", fields: [createdBy], references: [id])
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, slug])
  @@index([slug])
  @@index([organizationId])
  @@index([createdBy])
  @@map("projects")
}

model ProjectMember {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId    String    @map("project_id") @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  role         String
  engagement   String?
  hoursPerWeek Int?      @map("hours_per_week")
  joinedAt     DateTime  @default(now()) @map("joined_at") @db.Timestamptz(6)
  leftAt       DateTime? @map("left_at") @db.Timestamptz(6)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

model ProjectBoard {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String   @map("project_id") @db.Uuid
  boardId   String   @map("board_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, boardId])
  @@index([projectId])
  @@index([boardId])
  @@map("project_boards")
}

model Board {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String         @map("organization_id") @db.Uuid
  name           String
  slug           String?
  boardType      String?        @map("board_type")
  logo           String?
  description    String?
  color          String?        @default("#3B82F6")
  createdBy      String?        @map("created_by") @db.Uuid
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  columns        BoardColumn[]
  members        BoardMember[]  @relation("BoardMembers")
  creator        User?          @relation("BoardCreator", fields: [createdBy], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  customFields   CustomField[]
  labels         Label[]
  projectLinks   ProjectBoard[]
  sprints        Sprint[]
  tasks          Task[]

  @@unique([organizationId, slug])
  @@index([slug])
  @@index([organizationId])
  @@index([createdBy])
  @@map("boards")
}

model BoardColumn {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId   String?  @map("board_id") @db.Uuid
  name      String
  position  Int
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  board     Board?   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@index([boardId])
  @@map("board_columns")
}

model Task {
  id                String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId           String                 @map("board_id") @db.Uuid
  columnId          String?                @map("column_id") @db.Uuid
  sprintColumnId    String?                @map("sprint_column_id") @db.Uuid
  sprintId          String?                @map("sprint_id") @db.Uuid
  title             String
  description       String?
  taskType          String?                @default("story") @map("task_type")
  itemCode          String?                @unique @map("item_code")
  epicId            String?                @map("epic_id") @db.Uuid
  parentId          String?                @map("parent_id") @db.Uuid
  blockedBy         String[]               @map("blocked_by")
  estimatedHours    Int?                   @default(0) @map("estimated_hours")
  loggedHours       Int?                   @default(0) @map("logged_hours")
  priority          String?
  storyPoints       Int?                   @map("story_points")
  effortUnits       Int?                   @map("effort_units")
  estimationType    String?                @default("story_points") @map("estimation_type")
  itemValue         String?                @map("item_value")
  position          Int?
  createdBy         String?                @map("created_by") @db.Uuid
  dueDate           DateTime?              @map("due_date") @db.Date
  isPriority        Boolean                @default(false) @map("is_priority")
  isArchived        Boolean                @default(false) @map("is_archived")
  createdAt         DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  attachments       Attachment[]
  comments          Comment[]
  activities        TaskActivity[]         @relation("TaskActivities")
  taskAssignees     TaskAssignee[]
  checklists        TaskChecklist[]
  customFieldValues TaskCustomFieldValue[]
  followers         TaskFollower[]         @relation("TaskFollowers")
  taskLabels        TaskLabel[]
  relationsAsSource TaskRelation[]         @relation("SourceTask")
  relationsAsTarget TaskRelation[]         @relation("TargetTask")
  taskReviewers     TaskReviewer[]
  worklogEntries    TaskWorklog[]
  board             Board                  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  column            BoardColumn?           @relation(fields: [columnId], references: [id])
  creator           User?                  @relation("TaskCreator", fields: [createdBy], references: [id])
  epic              Task?                  @relation("EpicTasks", fields: [epicId], references: [id])
  subtasks          Task[]                 @relation("EpicTasks")
  parent            Task?                  @relation("ParentSubitems", fields: [parentId], references: [id])
  subitems          Task[]                 @relation("ParentSubitems")
  sprintColumn      SprintColumn?          @relation("SprintColumnTasks", fields: [sprintColumnId], references: [id])
  sprint            Sprint?                @relation(fields: [sprintId], references: [id])

  // Performance indexes for foreign keys
  @@index([boardId])
  @@index([columnId])
  @@index([sprintId])
  @@index([sprintColumnId])
  @@index([createdBy])
  @@index([parentId])
  @@index([epicId])
  // Composite indexes for common query patterns
  @@index([boardId, columnId])
  @@index([boardId, sprintId])
  @@index([boardId, sprintColumnId])
  @@map("tasks")
}

model TaskRelation {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sourceTaskId String   @map("source_task_id") @db.Uuid
  targetTaskId String   @map("target_task_id") @db.Uuid
  relationType String   @map("relation_type")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  createdBy    String?  @map("created_by") @db.Uuid
  creator      User?    @relation("TaskRelationCreator", fields: [createdBy], references: [id])
  sourceTask   Task     @relation("SourceTask", fields: [sourceTaskId], references: [id], onDelete: Cascade)
  targetTask   Task     @relation("TargetTask", fields: [targetTaskId], references: [id], onDelete: Cascade)

  @@unique([sourceTaskId, targetTaskId, relationType])
  @@index([sourceTaskId])
  @@index([targetTaskId])
  @@index([createdBy])
  @@map("task_relations")
}

model Sprint {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId        String         @map("board_id") @db.Uuid
  name           String
  slug           String?
  goal           String?
  status         String?        @default("planning")
  startDate      DateTime?      @map("start_date") @db.Date
  endDate        DateTime?      @map("end_date") @db.Date
  position       Int            @default(0)
  isBacklog      Boolean        @default(false) @map("is_backlog")
  isDeleted      Boolean        @default(false) @map("is_deleted")
  isFinished     Boolean        @default(false) @map("is_finished")
  maxColumns     Int?           @map("max_columns")
  parentSprintId String?        @map("parent_sprint_id") @db.Uuid
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  sprintColumns  SprintColumn[]
  board          Board          @relation(fields: [boardId], references: [id], onDelete: Cascade)
  parentSprint   Sprint?        @relation("ParentChildSprints", fields: [parentSprintId], references: [id])
  childSprints   Sprint[]       @relation("ParentChildSprints")
  tasks          Task[]

  @@unique([boardId, slug])
  @@index([slug])
  @@index([boardId])
  @@index([parentSprintId])
  @@index([boardId, status])
  @@map("sprints")
}

model SprintColumn {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sprintId  String   @map("sprint_id") @db.Uuid
  name      String
  position  Int
  isDone    Boolean  @default(false) @map("is_done")
  wipLimit  Int?     @map("wip_limit")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  sprint    Sprint   @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  tasks     Task[]   @relation("SprintColumnTasks")

  @@index([sprintId])
  @@map("sprint_columns")
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId    String   @map("task_id") @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([taskId, createdAt(sort: Desc)])
  @@map("comments")
}

model Attachment {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId         String?  @map("task_id") @db.Uuid
  url            String
  name           String?
  size           Int?     @default(0)
  type           String?  @default("application/octet-stream")
  uploadedBy     String?  @map("uploaded_by") @db.Uuid
  uploadedAt     DateTime @default(now()) @map("uploaded_at") @db.Timestamptz(6)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  task           Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedByUser User?    @relation(fields: [uploadedBy], references: [id])

  @@index([taskId])
  @@index([uploadedBy])
  @@map("attachments")
}

model TaskChecklist {
  id        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId    String              @map("task_id") @db.Uuid
  name      String
  createdBy String              @map("created_by") @db.Uuid
  createdAt DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  items     TaskChecklistItem[]
  creator   User                @relation(fields: [createdBy], references: [id])
  task      Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([createdBy])
  @@map("task_checklists")
}

model TaskChecklistItem {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checklistId     String        @map("checklist_id") @db.Uuid
  content         String
  completed       Boolean       @default(false)
  completedAt     DateTime?     @map("completed_at") @db.Timestamptz(6)
  completedBy     String?       @map("completed_by") @db.Uuid
  createdBy       String        @map("created_by") @db.Uuid
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  checklist       TaskChecklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  completedByUser User?         @relation("ChecklistItemCompletedBy", fields: [completedBy], references: [id])
  creator         User          @relation(fields: [createdBy], references: [id])

  @@index([checklistId])
  @@index([completedBy])
  @@index([createdBy])
  @@map("task_checklist_items")
}

model TaskWorklog {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId      String   @map("task_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  description String
  hoursLogged Float    @map("hours_logged")
  dateLogged  DateTime @map("date_logged") @db.Timestamptz(6)
  startDate   DateTime @map("start_date") @db.Timestamptz(6)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@map("task_worklog")
}

model Label {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId     String      @map("board_id") @db.Uuid
  name        String
  description String?
  color       String?     @default("#3B82F6")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  board       Board       @relation(fields: [boardId], references: [id], onDelete: Cascade)
  taskLabels  TaskLabel[]

  @@unique([boardId, name])
  @@index([boardId])
  @@map("labels")
}

model TaskLabel {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId  String @map("task_id") @db.Uuid
  labelId String @map("label_id") @db.Uuid
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, labelId])
  @@index([taskId])
  @@index([labelId])
  @@map("task_labels")
}

model TaskAssignee {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId String @map("task_id") @db.Uuid
  userId String @map("user_id") @db.Uuid
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
  @@map("task_assignees")
}

model TaskReviewer {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId String @map("task_id") @db.Uuid
  userId String @map("user_id") @db.Uuid
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
  @@map("task_reviewers")
}

model CustomField {
  id           String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId      String                 @map("board_id") @db.Uuid
  name         String
  fieldType    String                 @map("field_type")
  defaultValue String?                @map("default_value")
  minValue     Float?                 @map("min_value")
  maxValue     Float?                 @map("max_value")
  position     Int?                   @default(0)
  isRequired   Boolean                @default(false) @map("is_required")
  createdAt    DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  board        Board                  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  values       TaskCustomFieldValue[]

  @@index([boardId])
  @@map("custom_fields")
}

model TaskCustomFieldValue {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId        String      @map("task_id") @db.Uuid
  customFieldId String      @map("custom_field_id") @db.Uuid
  value         String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  task          Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, customFieldId])
  @@index([taskId])
  @@index([customFieldId])
  @@map("task_custom_field_values")
}

model PermissionSet {
  id             String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String               @map("organization_id") @db.Uuid
  name           String
  permissions    Json
  isDefault      Boolean              @default(false) @map("is_default")
  createdAt      DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  members        OrganizationMember[]
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitations    TeamInvitation[]

  @@index([organizationId])
  @@map("permission_sets")
}

model ProjectEngagement {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationMemberId String             @map("organization_member_id") @db.Uuid
  projectId            String             @map("project_id") @db.Uuid
  role                 String?
  hoursPerWeek         Int                @map("hours_per_week")
  startDate            DateTime           @map("start_date") @db.Date
  endDate              DateTime?          @map("end_date") @db.Date
  isActive             Boolean            @default(true) @map("is_active")
  createdAt            DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  organizationMember   OrganizationMember @relation(fields: [organizationMemberId], references: [id], onDelete: Cascade)
  project              Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([organizationMemberId])
  @@index([projectId])
  @@map("project_engagements")
}

model TimeOffEntry {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationMemberId String             @map("organization_member_id") @db.Uuid
  type                 String
  startDate            DateTime           @map("start_date") @db.Date
  endDate              DateTime           @map("end_date") @db.Date
  description          String?
  approvedBy           String?            @map("approved_by") @db.Uuid
  status               String             @default("pending")
  createdAt            DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  approver             User?              @relation("TimeOffApprover", fields: [approvedBy], references: [id])
  organizationMember   OrganizationMember @relation(fields: [organizationMemberId], references: [id], onDelete: Cascade)

  @@index([organizationMemberId])
  @@index([approvedBy])
  @@map("time_off_entries")
}

model MemberProfile {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationMemberId String             @unique @map("organization_member_id") @db.Uuid
  secondaryEmail       String?            @map("secondary_email")
  address              String?
  phone                String?
  linkedin             String?
  skype                String?
  twitter              String?
  birthday             DateTime?          @db.Date
  maritalStatus        String?            @map("marital_status")
  family               String?
  other                String?
  visibility           Json               @default("{}")
  createdAt            DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  organizationMember   OrganizationMember @relation(fields: [organizationMemberId], references: [id], onDelete: Cascade)

  @@map("member_profiles")
}

model TimelineEvent {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationMemberId String             @map("organization_member_id") @db.Uuid
  eventName            String             @map("event_name")
  eventDate            DateTime           @map("event_date") @db.Date
  description          String?
  createdBy            String             @map("created_by") @db.Uuid
  createdAt            DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  creator              User               @relation("TimelineEventCreator", fields: [createdBy], references: [id])
  organizationMember   OrganizationMember @relation(fields: [organizationMemberId], references: [id], onDelete: Cascade)

  @@index([organizationMemberId])
  @@index([createdBy])
  @@map("timeline_events")
}

model CustomRole {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  name           String
  color          String       @default("#3B82F6")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@index([organizationId])
  @@map("custom_roles")
}

model AuditLog {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  userId         String       @map("user_id") @db.Uuid
  action         String
  resourceType   String       @map("resource_type")
  resourceId     String?      @map("resource_id") @db.Uuid
  details        String?
  ipAddress      String?      @map("ip_address")
  userAgent      String?      @map("user_agent")
  timestamp      DateTime     @default(now()) @db.Timestamptz(6)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId, timestamp])
  @@index([userId, timestamp])
  @@index([resourceType, timestamp])
  @@index([organizationId])
  @@index([userId])
  @@map("audit_logs")
}

model Notification {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @map("user_id") @db.Uuid
  organizationId  String?       @map("organization_id") @db.Uuid
  type            String
  title           String
  content         String
  link            String?
  entityType      String?       @map("entity_type")
  entityId        String?       @map("entity_id") @db.Uuid
  triggeredBy     String?       @map("triggered_by") @db.Uuid
  metadata        Json?
  isRead          Boolean       @default(false) @map("is_read")
  readAt          DateTime?     @map("read_at") @db.Timestamptz(6)
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  triggeredByUser User?         @relation("NotificationTriggeredBy", fields: [triggeredBy], references: [id])
  user            User          @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead, createdAt])
  @@index([organizationId, createdAt])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([organizationId])
  @@index([triggeredBy])
  @@map("notifications")
}

model TaskFollower {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId    String   @map("task_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  task      Task     @relation("TaskFollowers", fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation("UserTaskFollows", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
  @@map("task_followers")
}

model BoardMember {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId   String   @map("board_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  role      String   @default("member")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  board     Board    @relation("BoardMembers", fields: [boardId], references: [id], onDelete: Cascade)
  user      User     @relation("UserBoardMemberships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
  @@index([boardId])
  @@index([userId])
  @@map("board_members")
}

model TaskActivity {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId       String   @map("task_id") @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  activityType String   @map("activity_type")
  description  String
  oldValue     String?  @map("old_value")
  newValue     String?  @map("new_value")
  metadata     Json?
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  task         Task     @relation("TaskActivities", fields: [taskId], references: [id], onDelete: Cascade)
  user         User     @relation("UserTaskActivities", fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
  @@index([userId, createdAt])
  @@index([taskId])
  @@index([userId])
  @@map("task_activities")
}
